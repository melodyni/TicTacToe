{"version":3,"sources":["Cell.js","Grid.js","Status.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","id","onClick","symbol","Grid","cells","map","key","Status","message","Game","state","player","Array","fill","winner","updateGame","bind","event","target","this","newCells","slice","isGameWon","winConditions","some","every","setState","winMsg","turnMsg","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kNAWeA,G,KARF,SAACC,GACZ,OACE,4BAAQC,UAAU,YAAYC,GAAIF,EAAME,GAAIC,QAASH,EAAMG,SACxDH,EAAMI,UCQEC,EAVF,SAACL,GACZ,OACE,yBAAKC,UAAU,QACZD,EAAMM,MAAMC,KAAI,SAACH,EAAQF,GAAT,OACf,kBAAC,EAAD,CAAME,OAAQA,EAAQF,GAAIA,EAAIM,IAAKN,EAAIC,QAASH,EAAMG,eCH/CM,EAFA,SAACT,GAAD,OAAW,uBAAGC,UAAU,QAAQD,EAAMU,UCyCtCC,E,kDAvCb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CAAEC,OAAQ,IAAKP,MAAOQ,MAAM,GAAGC,KAAK,MAAOC,OAAQ,MAChE,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHD,E,uDAMRC,GACT,IAAMjB,EAAKiB,EAAMC,OAAOlB,GADR,EAEkBmB,KAAKT,MAA/BN,EAFQ,EAERA,MAAOU,EAFC,EAEDA,OAAQH,EAFP,EAEOA,OAEvB,IAAKP,EAAMJ,KAAQc,EAAQ,CACzB,IAAIM,EAAWhB,EAAMiB,QACrBD,EAASpB,GAAMW,EAEf,IAAMW,EAAYH,KAAKrB,MAAMyB,cAAcC,MAAK,SAACpB,GAAD,OAC9CA,EAAMqB,OAAM,SAACzB,GAAD,OAAQoB,EAASpB,KAAQW,QAGvCQ,KAAKO,SAAS,CACZZ,OAAQQ,EAAYX,EAAS,KAC7BA,OAAmB,MAAXA,EAAiB,IAAM,IAC/BP,MAAOgB,O,+BAKH,IAAD,EAC2BD,KAAKT,MAA/BI,EADD,EACCA,OAAQH,EADT,EACSA,OAAQP,EADjB,EACiBA,MAClBuB,EAAS,kBAAC,EAAD,CAAQnB,QAAO,kBAAaM,KACrCc,EAAU,kBAAC,EAAD,CAAQpB,QAAO,uBAAkBG,KACjD,OACE,6BACGG,EAASa,EAASC,EACnB,kBAAC,EAAD,CAAMxB,MAAOA,EAAOH,QAASkB,KAAKJ,kB,GAlCvBc,IAAMC,WCDnBP,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAOMQ,EAJH,WACV,OAAO,kBAAC,EAAD,CAAMR,cAAeA,KCHVS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzC,a","file":"static/js/main.5bc7da06.chunk.js","sourcesContent":["import React from 'react';\nimport './game.css';\n\nconst Cell = (props) => {\n  return (\n    <button className='cell font' id={props.id} onClick={props.onClick}>\n      {props.symbol}\n    </button>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport './game.css';\n\nconst Grid = (props) => {\n  return (\n    <div className='grid'>\n      {props.cells.map((symbol, id) => (\n        <Cell symbol={symbol} id={id} key={id} onClick={props.onClick} />\n      ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from 'react';\nimport './game.css';\n\nconst Status = (props) => <p className='font'>{props.message}</p>;\n\nexport default Status;\n","import React from 'react';\nimport Grid from './Grid';\nimport Status from './Status';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { player: 'X', cells: Array(9).fill(null), winner: null };\n    this.updateGame = this.updateGame.bind(this);\n  }\n\n  updateGame(event) {\n    const id = event.target.id;\n    const { cells, winner, player } = this.state;\n\n    if (!cells[id] && !winner) {\n      let newCells = cells.slice();\n      newCells[id] = player;\n\n      const isGameWon = this.props.winConditions.some((cells) =>\n        cells.every((id) => newCells[id] === player)\n      );\n\n      this.setState({\n        winner: isGameWon ? player : null,\n        player: player === 'X' ? '0' : 'X',\n        cells: newCells,\n      });\n    }\n  }\n\n  render() {\n    const { winner, player, cells } = this.state;\n    const winMsg = <Status message={`Winner: ${winner}`} />;\n    const turnMsg = <Status message={`Turn: Player ${player}`} />;\n    return (\n      <div>\n        {winner ? winMsg : turnMsg}\n        <Grid cells={cells} onClick={this.updateGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\n\nconst winConditions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst App = () => {\n  return <Game winConditions={winConditions} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}