{"version":3,"sources":["Cell.js","Grid.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","symbol","id","onClick","color","styles","className","Grid","cells","map","key","Status","msg","winConditions","Game","state","player","Array","fill","status","updateGame","bind","isGameWon","some","subCell","every","allMovePlayed","c","event","target","this","newCells","slice","setState","getGameStatus","statusMsg","won","turn","draw","React","Component","newGame","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAmBeA,G,KAhBF,SAACC,GAAW,IACfC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,GAAIC,EAAYH,EAAZG,QAChBC,EAAQ,GACG,MAAXH,EACFG,EAAQ,MACY,MAAXH,IACTG,EAAQ,QAEV,IAAMC,EAAM,oBAAgBD,GAC5B,OACE,4BAAQE,UAAWD,EAAQH,GAAIA,EAAIC,QAASA,GACzCF,KCAQM,EAVF,SAACP,GACZ,OACE,yBAAKM,UAAU,QACZN,EAAMQ,MAAMC,KAAI,SAACR,EAAQC,GAAT,OACf,kBAAC,EAAD,CAAMD,OAAQA,EAAQC,GAAIA,EAAIQ,IAAKR,EAAIC,QAASH,EAAMG,eCLxDQ,EAAS,SAACX,GAAD,OAAW,uBAAGM,UAAU,QAAQN,EAAMY,MAE/CC,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAgDMC,E,kDA5Cb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAQ,CAAEC,OAAQ,IAAKR,MAAOS,MAAM,GAAGC,KAAK,MAAOC,OAAQ,QAChE,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAHD,E,0DAMLb,GAAQ,IAAD,OACbc,EAAYT,EAAcU,MAAK,SAACC,GAAD,OACnCA,EAAQC,OAAM,SAACvB,GAAD,OAAQM,EAAMN,KAAQ,EAAKa,MAAMC,aAE3CU,EAAgBlB,EAAMiB,OAAM,SAACE,GAAD,OAAOA,KACzC,OAAOL,EAAY,MAAQI,EAAgB,OAAS,S,iCAG3CE,GACT,IAAM1B,EAAK0B,EAAMC,OAAO3B,GADR,EAEkB4B,KAAKf,MAA/BP,EAFQ,EAERA,MAAOW,EAFC,EAEDA,OAAQH,EAFP,EAEOA,OACvB,IAAKR,EAAMN,IAAkB,SAAXiB,EAAmB,CACnC,IAAIY,EAAWvB,EAAMwB,QACrBD,EAAS7B,GAAMc,EACfc,KAAKG,SAAS,CACZd,OAAQW,KAAKI,cAAcH,GAC3Bf,OAAmB,MAAXA,EAAiB,IAAM,IAC/BR,MAAOuB,O,+BAKH,IAAD,EAC2BD,KAAKf,MAA/BI,EADD,EACCA,OAAQH,EADT,EACSA,OAAQR,EADjB,EACiBA,MAClB2B,EAAY,CAChBC,IAAI,WAAD,OAAwB,MAAXpB,EAAiB,IAAM,KACvCqB,KAAK,gBAAD,OAAkBrB,GACtBsB,KAAK,aAEP,OACE,6BACE,kBAAC,EAAD,CAAQ1B,IAAKuB,EAAUhB,KACvB,kBAAC,EAAD,CAAMX,MAAOA,EAAOL,QAAS2B,KAAKV,kB,GAvCvBmB,IAAMC,WCbnBC,EAAU,WACdC,OAAOC,SAASC,QAAO,IAeVC,EAZH,WACV,OACE,yBAAKvC,UAAU,aACb,kBAAC,EAAD,MACA,6BACA,4BAAQH,QAASsC,EAASnC,UAAU,gBAApC,cCAcwC,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0432359c.chunk.js","sourcesContent":["import React from 'react';\nimport './game.css';\n\nconst Cell = (props) => {\n  const { symbol, id, onClick } = props;\n  let color = '';\n  if (symbol === 'X') {\n    color = 'red';\n  } else if (symbol === '0') {\n    color = 'blue';\n  }\n  const styles = `cell font ${color}`;\n  return (\n    <button className={styles} id={id} onClick={onClick}>\n      {symbol}\n    </button>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport './game.css';\n\nconst Grid = (props) => {\n  return (\n    <div className='grid'>\n      {props.cells.map((symbol, id) => (\n        <Cell symbol={symbol} id={id} key={id} onClick={props.onClick} />\n      ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from 'react';\nimport Grid from './Grid';\n\nconst Status = (props) => <p className='font'>{props.msg}</p>;\n\nconst winConditions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { player: 'X', cells: Array(9).fill(null), status: 'turn' };\n    this.updateGame = this.updateGame.bind(this);\n  }\n\n  getGameStatus(cells) {\n    const isGameWon = winConditions.some((subCell) =>\n      subCell.every((id) => cells[id] === this.state.player)\n    );\n    const allMovePlayed = cells.every((c) => c);\n    return isGameWon ? 'won' : allMovePlayed ? 'draw' : 'turn';\n  }\n\n  updateGame(event) {\n    const id = event.target.id;\n    const { cells, status, player } = this.state;\n    if (!cells[id] && status === 'turn') {\n      let newCells = cells.slice();\n      newCells[id] = player;\n      this.setState({\n        status: this.getGameStatus(newCells),\n        player: player === 'X' ? '0' : 'X',\n        cells: newCells,\n      });\n    }\n  }\n\n  render() {\n    const { status, player, cells } = this.state;\n    const statusMsg = {\n      won: `Winner: ${player === 'X' ? '0' : 'X'}`,\n      turn: `Turn: Player ${player}`,\n      draw: `Draw Game`,\n    };\n    return (\n      <div>\n        <Status msg={statusMsg[status]} />\n        <Grid cells={cells} onClick={this.updateGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\n\nconst newGame = () => {\n  window.location.reload(false);\n};\n\nconst App = () => {\n  return (\n    <div className='container'>\n      <Game />\n      <br />\n      <button onClick={newGame} className='font button '>\n        New Game\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}