{"version":3,"sources":["Cell.js","Grid.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","symbol","id","onClick","styles","X","className","Grid","cells","map","key","Status","msg","winConditions","Game","state","currentPlayer","name","nextPlayer","Array","fill","winner","isGameDraw","updateGame","bind","some","subCell","every","this","setState","newCells","slice","newWinner","getWinner","c","status","React","Component","newGame","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75021155.chunk.js","sourcesContent":["import React from 'react';\nimport './game.css';\n\nconst Cell = (props) => {\n  const { symbol, id, onClick } = props;\n  const color = {\n    X: 'red',\n    '0': 'blue',\n    '': '',\n  };\n\n  const styles = `cell font ${color[symbol]}`;\n  return (\n    <button className={styles} id={id} onClick={() => onClick(id)}>\n      {symbol}\n    </button>\n  );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport './game.css';\n\nconst Grid = (props) => {\n  return (\n    <div className='grid'>\n      {props.cells.map((symbol, id) => (\n        <Cell symbol={symbol} id={id} key={id} onClick={props.onClick} />\n      ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from 'react';\nimport Grid from './Grid';\n\nconst Status = (props) => <p className='font'>{props.msg}</p>;\n\nconst winConditions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPlayer: { name: 'X', symbol: 'X' },\n      nextPlayer: { name: '0', symbol: '0' },\n      cells: Array(9).fill(''),\n      winner: { name: null },\n      isGameDraw: false,\n    };\n    this.updateGame = this.updateGame.bind(this);\n  }\n\n  getWinner(cells, currentPlayer) {\n    const isGameWon = winConditions.some((subCell) =>\n      subCell.every((id) => cells[id] === currentPlayer.symbol)\n    );\n    return { name: isGameWon ? currentPlayer.name : null };\n  }\n\n  updateGame(id) {\n    this.setState(\n      ({ currentPlayer, nextPlayer, cells, isGameDraw, winner }) => {\n        let newCells = cells.slice();\n        if (!newCells[id] && !isGameDraw && !winner.name) {\n          newCells[id] = currentPlayer.symbol;\n          const newWinner = this.getWinner(newCells, currentPlayer);\n          return {\n            cells: newCells,\n            currentPlayer: nextPlayer,\n            nextPlayer: currentPlayer,\n            winner: newWinner,\n            isGameDraw: newCells.every((c) => c) && !newWinner.name,\n          };\n        }\n      }\n    );\n  }\n\n  render() {\n    const { cells, currentPlayer, isGameDraw, winner } = this.state;\n    let status = `${currentPlayer.name}'s Turn`;\n    if (winner.name) {\n      status = `${winner.name} Won`;\n    }\n    if (isGameDraw) {\n      status = `Draw Game`;\n    }\n    return (\n      <div>\n        <Status msg={status} />\n        <Grid cells={cells} onClick={this.updateGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\n\nconst newGame = () => {\n  window.location.reload(false);\n};\n\nconst App = () => {\n  return (\n    <div className='container'>\n      <Game />\n      <br />\n      <button onClick={newGame} className='font button '>\n        New Game\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}